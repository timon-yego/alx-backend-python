pipeline {
    agent any

    environment {
        DOCKER_IMAGE = 'messaging-app'
        DOCKER_REGISTRY = 'timon-yego'
    }

    stages {
        stage('Checkout Code') {
            steps {
                // Checkout the specified branch from GitHub repository
               git branch: 'main', git credentialsId: "${env.GIT_CREDENTIALS}", url: 'https://github.com/timon-yego/alx-backend-python.git'
            }
        }

        stage('Set up Python') {
            steps {
                script {
                    // Set up a virtual environment and install dependencies using pip3
                    sh 'python3 -m venv venv'
                    sh 'source venv/bin/activate'
                    sh 'pip3 install -r messaging_app/requirements.txt'
                }
            }
        }

        stage('Run Tests') {
            steps {
                script {
                    // Run pytest and generate test output
                    sh 'source venv/bin/activate'
                    sh 'pytest --maxfail=1 --disable-warnings -q > result.log || true'
                    sh 'tail -n 10 result.log'  // Display last 10 lines of result log
                }
            }
        }

        stage('Generate Test Report') {
            steps {
                script {
                    // Generate a pytest report in XML format
                    sh 'pytest --maxfail=5 --disable-warnings -q --junitxml=pytest-report.xml'
                }
            }
        }
    }

    post {
        always {
            // Archive the test report so it's available even if the pipeline fails
            archiveArtifacts artifacts: '**/pytest-report.xml', allowEmptyArchive: true
        }

        success {
            echo "Tests passed successfully!"
        }

        failure {
            echo "Tests failed!"
        }
    }
}
