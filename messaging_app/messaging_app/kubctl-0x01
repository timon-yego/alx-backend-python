#!/bin/bash

# Check if kubectl is installed
if ! [ -x "$(command -v kubectl)" ]; then
  echo "Error: kubectl is not installed. Please install kubectl first." >&2
  exit 1
fi

# Step 1: Scale the Django App Deployment
echo "Scaling the Django app deployment to 3 replicas..."
kubectl scale deployment django-messaging-app --replicas=3

# Verify the scaling operation
echo "Verifying the number of pods..."
kubectl get pods -l app=messaging-app

# Step 2: Perform Load Testing
if ! [ -x "$(command -v wrk)" ]; then
  echo "Error: wrk is not installed. Please install wrk to perform load testing." >&2
  exit 1
fi

# Port-forward the service to test locally
echo "Port-forwarding the Django service for load testing..."
kubectl port-forward svc/django-messaging-service 8000:8000 &
PORT_FORWARD_PID=$!
sleep 5  # Give port-forward time to initialize

# Run wrk to perform load testing
echo "Running load testing using wrk..."
wrk -t4 -c100 -d30s http://localhost:8000 > load_test_results.txt

# Stop the port-forwarding
kill $PORT_FORWARD_PID

echo "Load testing completed. Results saved in load_test_results.txt."

# Step 3: Monitor Resource Usage
if ! [ "$(kubectl top nodes 2>/dev/null)" ]; then
  echo "Error: Metrics server not installed. Installing metrics server..."
  kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml
  sleep 30  # Wait for metrics server to start
fi

echo "Monitoring resource usage for pods..."
kubectl top pods

echo "Monitoring resource usage for nodes..."
kubectl top nodes

echo "Scaling and monitoring script completed successfully!"
